name: munchies-kiosk
version: 1.0.4
summary: Munchies Kiosk
description: |
  Munchies Kiosk App - aplikacja kiosku samoobsługowego dla punktów APS.
  Umożliwia przeglądanie menu, składanie zamówień i dokonywanie płatności.

base: core20
confinement: strict
grade: stable

apps:
  munchies-kiosk:
    command: bin/flask-run
    daemon: simple
    restart-condition: always
    aliases: [munchies-kiosk]
    environment:
      PYTHONPATH: $SNAP/app:$SNAP/lib/python3.8/site-packages:$SNAP/usr/lib/python3/dist-packages
      FLASK_APP: app.kiosk_app
      FLASK_ENV: production
      LC_ALL: C.UTF-8
      LANG: C.UTF-8
    plugs:
      - network
      - network-bind
      - desktop
      - desktop-legacy
      - x11
      - wayland
      - gsettings
      - unity7
      - audio-playback
      - audio-record
      - pulseaudio
      - alsa
      - home

parts:
  flask-kiosk-app:
    plugin: python
    source: .
    requirements:
      - requirements.txt
    override-build: |
      snapcraftctl build
      
      # Kopiujemy kod aplikacji
      mkdir -p $SNAPCRAFT_PART_INSTALL/app
      cp -r * $SNAPCRAFT_PART_INSTALL/app/
      
      # Tworzymy katalogi dla skryptów i hooków
      mkdir -p $SNAPCRAFT_PART_INSTALL/bin
      mkdir -p $SNAPCRAFT_PART_INSTALL/snap/hooks
      
      # Create flask-run script
      cat > $SNAPCRAFT_PART_INSTALL/bin/flask-run << 'EOF'
      #!/bin/sh
      
      # Tworzymy katalog dla danych użytkownika
      if [ ! -d "$SNAP_USER_DATA" ]; then
        mkdir -p "$SNAP_USER_DATA"
      fi
      
      cd "$SNAP_USER_DATA"
      
      # Pobierz konfigurację ze snap config
      if command -v snapctl >/dev/null 2>&1; then
        export TERMINAL_ELAVON_IP="$(snapctl get terminal.ip)"
        export TERMINAL_ELAVON_PORT_STATE="$(snapctl get terminal.port.state)"
        export TERMINAL_ELAVON_PORT_PAYMENT="$(snapctl get terminal.port.payment)"
        export SUPABASE_LOCAL_URL="$(snapctl get supabase.local.url)"
        export SUPABASE_LOCAL_KEY="$(snapctl get supabase.local.key)"
        export SUPABASE_CENTRAL_URL="$(snapctl get supabase.central.url)"
        export SUPABASE_CENTRAL_KEY="$(snapctl get supabase.central.key)"
        export APS_ID="$(snapctl get aps.id)"
      fi
      
      # Wczytaj .env jeśli istnieje (tryb developerski)
      if [ -f ".env" ]; then
        set -a
        . ./.env
        set +a
      fi
      
      # Ustaw domyślne wartości jeśli nie są ustawione
      : ${TERMINAL_ELAVON_IP:="10.3.15.90"}
      : ${TERMINAL_ELAVON_PORT_STATE:="5189"}
      : ${TERMINAL_ELAVON_PORT_PAYMENT:="5188"}
      : ${APS_ID:="1"}
      
      exec flask run --host=0.0.0.0 --port=8000
      EOF
      chmod +x $SNAPCRAFT_PART_INSTALL/bin/flask-run
      
      # Create configure hook
      cat > $SNAPCRAFT_PART_INSTALL/snap/hooks/configure << 'EOF'
      #!/bin/sh
      
      # Validate and process configuration
      terminal_ip="$(snapctl get terminal.ip)"
      if [ -n "$terminal_ip" ]; then
        snapctl set terminal.ip="$terminal_ip"
      fi
      
      terminal_port_state="$(snapctl get terminal.port.state)"
      if [ -n "$terminal_port_state" ]; then
        snapctl set terminal.port.state="$terminal_port_state"
      fi
      
      terminal_port_payment="$(snapctl get terminal.port.payment)"
      if [ -n "$terminal_port_payment" ]; then
        snapctl set terminal.port.payment="$terminal_port_payment"
      fi
      
      aps_id="$(snapctl get aps.id)"
      if [ -n "$aps_id" ]; then
        snapctl set aps.id="$aps_id"
      fi
      
      exit 0
      EOF
      chmod +x $SNAPCRAFT_PART_INSTALL/snap/hooks/configure